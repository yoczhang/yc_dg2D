function [r1,r2]=generate_stiffness_matrix_pressure_term_local_DG_edge(DGM,DGT,DGE,DG_edge_flag...
                                                                ,Gauss_coefficient_reference_1D,Gauss_point_reference_1D...
                                                                ,basis_type_trial,basis_type_test,interior_edges,boundary_edges)


r1=sparse(size(DGT,2)*(basis_type_test+1)*(basis_type_test+2)/2,size(DGT,2)*(basis_type_trial+1)*(basis_type_trial+2)/2);
r2=sparse(size(DGT,2)*(basis_type_test+1)*(basis_type_test+2)/2,size(DGT,2)*(basis_type_trial+1)*(basis_type_trial+2)/2);

%% Interior edges
for i=1:length(interior_edges)
    n=interior_edges(i);ele=DGE(5,n);ele_neighbor=DGE(5,DGE(6,n));
    begin_point=DGE(1:2,n);end_point=DGE(3:4,n);
    
    b1=zeros((basis_type_trial+1)*(basis_type_trial+2)/2,(basis_type_test+1)*(basis_type_test+2)/2);
    b2=zeros((basis_type_trial+1)*(basis_type_trial+2)/2,(basis_type_test+1)*(basis_type_test+2)/2);
    if begin_point(1)==end_point(1) %vertical edge
        lower_bound=min(begin_point(2),end_point(2));
        upper_bound=max(begin_point(2),end_point(2));
        [Gauss_coefficient_local_1D,Gauss_point_local_1D]=generate_Gauss_local_1D(Gauss_coefficient_reference_1D,Gauss_point_reference_1D,lower_bound,upper_bound);
        for k=1:length(Gauss_coefficient_local_1D)
            b1=b1+0.5*Gauss_coefficient_local_1D(k)...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_trial,0,0)'...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(2,n);
            b2=b2+0.5*Gauss_coefficient_local_1D(k)...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_trial,0,0)'...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(3,n);
        end
    elseif begin_point(2)==end_point(2) % horizontal edge
        lower_bound=min(begin_point(1),end_point(1));
        upper_bound=max(begin_point(1),end_point(1));
        [Gauss_coefficient_local_1D,Gauss_point_local_1D]=generate_Gauss_local_1D(Gauss_coefficient_reference_1D,Gauss_point_reference_1D,lower_bound,upper_bound);
        for k=1:length(Gauss_coefficient_local_1D)
            b1=b1+0.5*Gauss_coefficient_local_1D(k)...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_trial,0,0)'...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(2,n);
            b2=b2+0.5*Gauss_coefficient_local_1D(k)...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_trial,0,0)'...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(3,n);
        end
    else
        lower_bound=min(begin_point(1),end_point(1));
        upper_bound=max(begin_point(1),end_point(1));
        [Gauss_coefficient_local_1D,Gauss_point_local_1D]=generate_Gauss_local_1D(Gauss_coefficient_reference_1D,Gauss_point_reference_1D,lower_bound,upper_bound);
        slope=(end_point(2)-begin_point(2))/(end_point(1)-begin_point(1));
        Jacobi=sqrt(1+slope^2);
        for k=1:length(Gauss_coefficient_local_1D)
            x=Gauss_point_local_1D(k);
            y=slope*(x-begin_point(1))+begin_point(2);
            b1=b1+0.5*Jacobi*Gauss_coefficient_local_1D(k)...
                     *local_basis(x,y,basis_type_trial,0,0)'...
                     *local_basis(x,y,basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(2,n);
            b2=b2+0.5*Jacobi*Gauss_coefficient_local_1D(k)...
                     *local_basis(x,y,basis_type_trial,0,0)'...
                     *local_basis(x,y,basis_type_test,0,0)...
                     *DG_edge_flag(4,n)*DG_edge_flag(3,n);
        end
    end
    
    for alpha=1:(basis_type_trial+1)*(basis_type_trial+2)/2
        for beta=1:(basis_type_test+1)*(basis_type_test+2)/2
            r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b1(alpha,beta);
            r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele_neighbor-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele_neighbor-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b1(alpha,beta);
            r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b2(alpha,beta);
            r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele_neighbor-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele_neighbor-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b2(alpha,beta);
        end
    end
end


%% Boundary edges
for i=1:length(boundary_edges)
    n=boundary_edges(i);ele=DGE(5,n);
    begin_point=DGE(1:2,n);end_point=DGE(3:4,n);
    
    b1=zeros((basis_type_trial+1)*(basis_type_trial+2)/2,(basis_type_test+1)*(basis_type_test+2)/2);
    b2=zeros((basis_type_trial+1)*(basis_type_trial+2)/2,(basis_type_test+1)*(basis_type_test+2)/2);
    if begin_point(1)==end_point(1) %vertical edge
        lower_bound=min(begin_point(2),end_point(2));
        upper_bound=max(begin_point(2),end_point(2));
        [Gauss_coefficient_local_1D,Gauss_point_local_1D]=generate_Gauss_local_1D(Gauss_coefficient_reference_1D,Gauss_point_reference_1D,lower_bound,upper_bound);
        for k=1:length(Gauss_coefficient_local_1D)
            b1=b1+Gauss_coefficient_local_1D(k)...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_trial,0,0)'...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_test,0,0)...
                     *DG_edge_flag(2,n);
            b2=b2+Gauss_coefficient_local_1D(k)...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_trial,0,0)'...
                     *local_basis(begin_point(1),Gauss_point_local_1D(k),basis_type_test,0,0)...
                     *DG_edge_flag(3,n);
        end
    else  % horizontal edge
        lower_bound=min(begin_point(1),end_point(1));
        upper_bound=max(begin_point(1),end_point(1));
        [Gauss_coefficient_local_1D,Gauss_point_local_1D]=generate_Gauss_local_1D(Gauss_coefficient_reference_1D,Gauss_point_reference_1D,lower_bound,upper_bound);
        for k=1:length(Gauss_coefficient_local_1D)
            b1=b1+Gauss_coefficient_local_1D(k)...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_trial,0,0)'...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_test,0,0)...
                     *DG_edge_flag(2,n);
            b2=b2+Gauss_coefficient_local_1D(k)...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_trial,0,0)'...
                     *local_basis(Gauss_point_local_1D(k),begin_point(2),basis_type_test,0,0)...
                     *DG_edge_flag(3,n);
        end
    end
    
    for alpha=1:(basis_type_trial+1)*(basis_type_trial+2)/2
        for beta=1:(basis_type_test+1)*(basis_type_test+2)/2
            r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r1((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b1(alpha,beta);
            r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                =r2((ele-1)*(basis_type_test+1)*(basis_type_test+2)/2+beta,(ele-1)*(basis_type_trial+1)*(basis_type_trial+2)/2+alpha)...
                  +b2(alpha,beta);
        end
    end
end

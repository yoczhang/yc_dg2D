%%>>-- Begin sub function 1 ---------------------------------------------------------
function coordTri0Elem = getcoordTri0Elem_test(singleNE, coordv, beginP_n)
%
%
%   input:
%       beginP_n, the n-th point of singleElem, and form the n-th point to
%       construct the little triangles.
%

m = @(x) mod(x,singleNE)+(x==singleNE)*singleNE;
n = beginP_n;
if singleNE == 3
    coordTri0Elem = coordv; % [3 x 2]
elseif singleNE == 4
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:)];
elseif singleNE == 5
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:)];
elseif singleNE == 6
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:); ...
        coordv(m(n),:); coordv(m(n+4),:); coordv(m(n+5),:)];
elseif singleNE == 7
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:); ...
        coordv(m(n),:); coordv(m(n+4),:); coordv(m(n+5),:); ...
        coordv(m(n),:); coordv(m(n+5),:); coordv(m(n+6),:)];  
elseif singleNE == 8
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:); ...
        coordv(m(n),:); coordv(m(n+4),:); coordv(m(n+5),:); ...
        coordv(m(n),:); coordv(m(n+5),:); coordv(m(n+6),:); ...
        coordv(m(n),:); coordv(m(n+6),:); coordv(m(n+7),:)];  
elseif singleNE == 9
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:); ...
        coordv(m(n),:); coordv(m(n+4),:); coordv(m(n+5),:); ...
        coordv(m(n),:); coordv(m(n+5),:); coordv(m(n+6),:); ...
        coordv(m(n),:); coordv(m(n+6),:); coordv(m(n+7),:); ...
        coordv(m(n),:); coordv(m(n+7),:); coordv(m(n+8),:)];
elseif singleNE == 10
    coordTri0Elem = ...
        [coordv(m(n),:); coordv(m(n+1),:); coordv(m(n+2),:); ...
        coordv(m(n),:); coordv(m(n+2),:); coordv(m(n+3),:); ...
        coordv(m(n),:); coordv(m(n+3),:); coordv(m(n+4),:); ...
        coordv(m(n),:); coordv(m(n+4),:); coordv(m(n+5),:); ...
        coordv(m(n),:); coordv(m(n+5),:); coordv(m(n+6),:); ...
        coordv(m(n),:); coordv(m(n+6),:); coordv(m(n+7),:); ...
        coordv(m(n),:); coordv(m(n+7),:); coordv(m(n+8),:); ...
        coordv(m(n),:); coordv(m(n+8),:); coordv(m(n+9),:)];
end 

end % function getcoordTri0Elem
%%<<-- End sub function 1 ---------------------------------------------------------------